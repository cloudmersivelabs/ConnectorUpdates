{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "convertapi",
    "description": "Convert API lets you effortlessly convert file formats and types."
  },
  "host": "api.cloudmersive.com",
  "schemes": [
    "https"
  ],
  "paths": {
    
    "/convert/edit/pdf/encrypt": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Encrypt and password-protect a PDF",
        "description": "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.",
        "operationId": "EditPdf_Encrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "userPassword",
            "in": "header",
            "description": "Password of a user (reader) of the PDF file",
            "required": false,
            "type": "string"
          },
          {
            "name": "ownerPassword",
            "in": "header",
            "description": "Password of a owner (creator/editor) of the PDF file",
            "required": false,
            "type": "string"
          },
          {
            "name": "encryptionKeyLength",
            "in": "header",
            "description": "Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256.",
            "required": false,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/encrypt/set-permissions": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Encrypt, password-protect and set restricted permissions on a PDF",
        "description": "Encrypt a PDF document with a password, and set permissions on the PDF.  Set an owner password to control owner (editor/creator) permissions [required], and set a user (reader) password to control the viewer of the PDF [optional].  Set the reader password to null to omit the password.  Restrict or allow printing, copying content, document assembly, editing (read-only), form filling, modification of annotations, and degraded printing through document Digital Rights Management (DRM).",
        "operationId": "EditPdf_SetPermissions",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "ownerPassword",
            "in": "header",
            "description": "Password of a owner (creator/editor) of the PDF file (required)",
            "required": true,
            "type": "string"
          },
          {
            "name": "userPassword",
            "in": "header",
            "description": "Password of a user (reader) of the PDF file (optional)",
            "required": true,
            "type": "string"
          },
          {
            "name": "encryptionKeyLength",
            "in": "header",
            "description": "Possible values are \"128\" (128-bit RC4 encryption) and \"256\" (256-bit AES encryption).  Default is 256.",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowPrinting",
            "in": "header",
            "description": "Set to false to disable printing through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowDocumentAssembly",
            "in": "header",
            "description": "Set to false to disable document assembly through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowContentExtraction",
            "in": "header",
            "description": "Set to false to disable copying/extracting content out of the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowFormFilling",
            "in": "header",
            "description": "Set to false to disable filling out form fields in the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowEditing",
            "in": "header",
            "description": "Set to false to disable editing in the PDF through DRM (making the PDF read-only).  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowAnnotations",
            "in": "header",
            "description": "Set to false to disable annotations and editing of annotations in the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowDegradedPrinting",
            "in": "header",
            "description": "Set to false to disable degraded printing of the PDF through DRM.  Default is true.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/decrypt": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Decrypt and password-protect a PDF",
        "description": "Decrypt a PDF document with a password.  Decrypted PDF will no longer require a password to open.",
        "operationId": "EditPdf_Decrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "password",
            "in": "header",
            "description": "Valid password for the PDF file",
            "required": true,
            "type": "string"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/watermark/text": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Add a text watermark to a PDF",
        "description": "Adds a text watermark to a PDF",
        "operationId": "EditPdf_WatermarkText",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "watermarkText",
            "in": "header",
            "description": "Watermark text to add to the PDF (required)",
            "required": true,
            "type": "string"
          },
          {
            "name": "fontName",
            "in": "header",
            "description": "Font Family Name for the watermark text; default is Times New Roman",
            "required": false,
            "type": "string"
          },
          {
            "name": "fontSize",
            "in": "header",
            "description": "Font Size in points of the text; default is 150",
            "required": false,
            "type": "number"
          },
          {
            "name": "fontColor",
            "in": "header",
            "description": "Font color in hexadecimal or HTML color name; default is Red",
            "required": false,
            "type": "string"
          },
          {
            "name": "fontTransparency",
            "in": "header",
            "description": "Font transparency between 0.0 (completely transparent) to 1.0 (fully opaque); default is 0.5",
            "required": false,
            "type": "number"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/rasterize": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rasterize a PDF to an image-based PDF",
        "description": "Rasterize a PDF into an image-based PDF.  The output is a PDF where each page is comprised of a high-resolution image, with all text, figures and other components removed.",
        "operationId": "EditPdf_Rasterize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/delete": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove, delete pages from a PDF document",
        "description": "Remove one or more pages from a PDF document",
        "operationId": "EditPdf_DeletePages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pageStart",
            "in": "header",
            "description": "Page number (1 based) to start deleting pages from (inclusive).",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEnd",
            "in": "header",
            "description": "Page number (1 based) to stop deleting pages from (inclusive).",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/insert": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Insert, copy pages from one PDF document into another",
        "description": "Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).",
        "operationId": "EditPdf_InsertPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sourceFile",
            "in": "formData",
            "description": "Source PDF file to copy pages from.",
            "required": true,
            "type": "file"
          },
          {
            "name": "destinationFile",
            "in": "formData",
            "description": "Destination PDF file to copy pages into.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pageStartSource",
            "in": "header",
            "description": "Page number (1 based) to start copying pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEndSource",
            "in": "header",
            "description": "Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageInsertBeforeDesitnation",
            "in": "header",
            "description": "Page number (1 based) to insert the pages before in the Destination file.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/insert/batch-job": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Insert, copy pages from one PDF document into another as a batch job",
        "description": "Copy one or more pages from one PDF document (source document) and insert them into a second PDF document (destination document).  Runs as a batch job async and returns a batch job ID that you can check the status of to get the result",
        "operationId": "EditPdf_InsertPagesBatchJob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sourceFile",
            "in": "formData",
            "description": "Source PDF file to copy pages from.",
            "required": true,
            "type": "file"
          },
          {
            "name": "destinationFile",
            "in": "formData",
            "description": "Destination PDF file to copy pages into.",
            "required": true,
            "type": "file"
          },
          {
            "name": "pageStartSource",
            "in": "header",
            "description": "Page number (1 based) to start copying pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEndSource",
            "in": "header",
            "description": "Page number (1 based) to stop copying pages pages from (inclusive) in the Source file.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageInsertBeforeDesitnation",
            "in": "header",
            "description": "Page number (1 based) to insert the pages before in the Destination file.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EditPdfBatchJobCreateResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/batch-job/status": {
      "get": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get the status and result of a Batch Job",
        "description": "Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.",
        "operationId": "EditPdf_GetAsyncJobStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "AsyncJobID",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EditPdfJobStatusResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/get-text": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get text in a PDF document by page",
        "description": "Gets the text in a PDF by page",
        "operationId": "EditPdf_GetPdfTextByPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "textFormattingMode",
            "in": "header",
            "description": "Optional; specify how whitespace should be handled when converting the document to text.  Possible values are 'preserveWhitespace' which will attempt to preserve whitespace in the document and relative positioning of text within the document, and 'minimizeWhitespace' which will not insert additional spaces into the document in most cases.  Default is 'preserveWhitespace'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfTextByPageResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/rotate/all": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rotate all pages in a PDF document",
        "description": "Rotate all of the pages in a PDF document by a multiple of 90 degrees",
        "operationId": "EditPdf_RotateAllPages",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "rotationAngle",
            "in": "header",
            "description": "The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/pages/rotate/page-range": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Rotate a range, subset of pages in a PDF document",
        "description": "Rotate a range of specific pages in a PDF document by a multiple of 90 degrees",
        "operationId": "EditPdf_RotatePageRange",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "rotationAngle",
            "in": "header",
            "description": "The angle to rotate the page in degrees, must be a multiple of 90 degrees, e.g. 90, 180, 270, or -90, -180, -270, etc.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageStart",
            "in": "header",
            "description": "Page number (1 based) to start rotating pages from (inclusive).",
            "required": true,
            "type": "integer"
          },
          {
            "name": "pageEnd",
            "in": "header",
            "description": "Page number (1 based) to stop rotating pages from (inclusive).",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/get-metadata": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get PDF document metadata",
        "description": "Returns the metadata from the PDF document, including Title, Author, etc.",
        "operationId": "EditPdf_GetMetadata",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfMetadata"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/set-metadata": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Sets PDF document metadata",
        "description": "Sets (writes) metadata into the input PDF document, including Title, Author, etc.",
        "operationId": "EditPdf_SetMetadata",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPdfMetadataRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/form/get-fields": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Gets PDF Form fields and values",
        "description": "Encrypt a PDF document with a password.  Set an owner password to control owner (editor/creator) permissions, and set a user (reader) password to control the viewer of the PDF.  Set the password fields null to omit the given password.",
        "operationId": "EditPdf_GetFormFields",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PdfFormFields"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/form/set-fields": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Sets ands fills PDF Form field values",
        "description": "Fill in the form fields in a PDF form with specific values.  Use form/get-fields to enumerate the available fields and their data types in an input form.",
        "operationId": "EditPdf_SetFormFields",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "fieldValues",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetPdfFormFieldsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/list": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Get PDF annotations, including comments in the document",
        "description": "Enumerates the annotations, including comments and notes, in a PDF document.",
        "operationId": "EditPdf_GetAnnotations",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetPdfAnnotationsResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/add-item": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Add one or more PDF annotations, comments in the PDF document",
        "description": "Adds one or more annotations, comments to a PDF document.",
        "operationId": "EditPdf_AddAnnotations",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddPdfAnnotationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/remove-item": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove a specific PDF annotation, comment in the document",
        "description": "Removes a specific annotation in a PDF document, using the AnnotationIndex.  To enumerate AnnotationIndex for all of the annotations in the PDF document, use the /edit/pdf/annotations/list API.",
        "operationId": "EditPdf_RemoveAnnotationItem",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "annotationIndex",
            "in": "header",
            "description": "The 0-based index of the annotation in the document",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/annotations/remove-all": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Remove all PDF annotations, including comments in the document",
        "description": "Removes all of the annotations, including comments and notes, in a PDF document.",
        "operationId": "EditPdf_RemoveAllAnnotations",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/resize": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Change PDF Document's Paper Size",
        "description": "Resizes a PDF document's paper size.",
        "operationId": "EditPdf_Resize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "paperSize",
            "in": "header",
            "description": "The desired paper size for the resized PDF document. Size ranges from A7 (smallest) to A0 (largest).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/optimize/pdf-a": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Convert a PDF file to PDF/A",
        "description": "Converts the input PDF file to a PDF/A-1b or PDF/A-2b standardized PDF.",
        "operationId": "EditPdf_ConvertToPdfA",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "conformanceLevel",
            "in": "header",
            "description": "Optional: Select the conformance level for PDF/A - specify '1b' for PDF/A-1b or specify '2b' for PDF/A-2b; default is PDF/A-1b",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/edit/pdf/optimize/reduce-file-size": {
      "post": {
        "tags": [
          "EditPdf"
        ],
        "summary": "Reduce the file size and optimize a PDF",
        "description": "Reduces the file size and optimizes the content of a PDF to minimize its file size.",
        "operationId": "EditPdf_ReduceFileSize",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "quality",
            "in": "header",
            "description": "Quality level for the images in the PDF, ranging from 0.0 (low quality) to 1.0 (high quality); default is 0.3",
            "required": false,
            "type": "number"
          },
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "format": "byte",
              "title": "OutputContent",
              "description": "Output file content from the operation",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      },
    "/convert/archive/zip/encrypt/advanced": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Encrypt and password protect a zip file",
        "description": "Encrypts and password protects an existing zip file with the specified password and encryption algorithm",
        "operationId": "ZipArchive_ZipEncryptAdvanced",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "encryptionRequest",
            "in": "body",
            "description": "Encryption request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZipEncryptionAdvancedRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/convert/archive/zip/decrypt": {
      "post": {
        "tags": [
          "ZipArchive"
        ],
        "summary": "Decrypt and remove password protection on a zip file",
        "description": "Decrypts and removes password protection from an encrypted zip file with the specified password",
        "operationId": "ZipArchive_ZipDecrypt",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "zipPassword",
            "in": "header",
            "description": "Required; Password for the input archive",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    }
  },
  "definitions": {
    "XmlFilterWithXPathResult": {
      "description": "Result of performing a filter operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "XmlNodes": {
          "description": "Matching selected XML nodes as strings",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ResultCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlQueryWithXQueryResult": {
      "description": "Result of performing an XQuery operation on an XML document.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXml": {
          "description": "Resulting XML result output",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "If an error occurs, additional details on the error",
          "type": "string"
        }
      }
    },
    "XmlQueryWithXQueryMultiResult": {
      "description": "Result of performing an XQuery operation on multiple XML documents.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXml": {
          "description": "Resulting XML result output",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "If an error occurs, additional details on the error",
          "type": "string"
        }
      }
    },
    "XmlSetValueWithXPathResult": {
      "description": "Result of performing a set value operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlReplaceWithXPathResult": {
      "description": "Result of performing a replace node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlAddChildWithXPathResult": {
      "description": "Result of performing a add child node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlAddAttributeWithXPathResult": {
      "description": "Result of performing a add attribute node operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlRemoveWithXPathResult": {
      "description": "Result of performing a filter operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document with matching nodes removed as a string",
          "type": "string"
        },
        "XmlNodesRemoved": {
          "description": "Matching selected XML nodes as strings",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NodesRemovedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "XmlRemoveAllChildrenWithXPathResult": {
      "description": "Result of performing a remove all child nodes operation on XML input using XPath",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ResultingXmlDocument": {
          "description": "Resulting, modified XML document",
          "type": "string"
        },
        "NodesEditedCount": {
          "format": "int32",
          "description": "Count of the matching results",
          "type": "integer"
        }
      }
    },
    "TextConversionResult": {
      "description": "Text conversion result from converting a document to Plain Text (TXT) format",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "TextResult": {
          "description": "Plain Text (TXT) format conversion result of the input document.  The text result is returned as a string.",
          "type": "string"
        }
      }
    },
    "DocxToPngResult": {
      "description": "Result of converting a DOCX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "ConvertedPngPage": {
      "description": "A single converted page",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PNG file of this page; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        }
      }
    },
    "DocxToJpgResult": {
      "description": "Result of converting a DOCX input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "ConvertedJpgPage": {
      "description": "A single converted page",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1",
          "type": "integer"
        },
        "Content": {
          "format": "byte",
          "description": "The JPG file of this page as a byte array",
          "type": "string"
        }
      }
    },
    "PptxToPngResult": {
      "description": "Result of converting a PPTX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "CsvCollection": {
      "description": "Collection of CSV Files",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "CsvFiles": {
          "description": "Array of CSV File results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CsvFileResult"
          }
        },
        "FileCount": {
          "format": "int32",
          "description": "Count of the number of CSV files produced",
          "type": "integer"
        }
      }
    },
    "CsvFileResult": {
      "description": "CSV file result",
      "type": "object",
      "properties": {
        "Title": {
          "description": "Title of the CSV file",
          "type": "string"
        },
        "FileContents": {
          "format": "byte",
          "description": "Contents of the CSV file",
          "type": "string"
        }
      }
    },
    "XlsxToPngResult": {
      "description": "Result of converting an XLSX input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "PdfToPngResult": {
      "description": "Result of converting a PDF to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "AutodetectGetInfoResult": {
      "description": "Result of an autodetect/get-info operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        },
        "PageCount": {
          "format": "int64",
          "description": "Number of pages in a page-based document; for presentations, this is the number of slides and for a spreadsheet this is the number of worksheets.  Contains 0 when the page count cannot be determined, or if the concept of page count does not apply (e.g. for an image)",
          "type": "integer"
        },
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "DateModified": {
          "format": "date-time",
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "type": "string"
        },
        "AlternateFileTypeCandidates": {
          "description": "Alternate file type options and their probability",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlternateFileFormatCandidate"
          }
        }
      }
    },
    "AlternateFileFormatCandidate": {
      "description": "Alternate file format possibility",
      "type": "object",
      "properties": {
        "Probability": {
          "format": "double",
          "description": "Probability that this extension is the right one; possible values are between 0.0 (lowest confidence) and 1.0 (highest confidence)",
          "type": "number"
        },
        "DetectedFileExtension": {
          "description": "Detected file extension of the file format, with a leading period",
          "type": "string"
        },
        "DetectedMimeType": {
          "description": "MIME type of this file extension",
          "type": "string"
        }
      }
    },
    "GetFileTypeIconResult": {
      "description": "Result of getting a file type icon from a file extension",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Icon": {
          "format": "byte",
          "description": "PNG icon as a byte array",
          "type": "string"
        },
        "Extension": {
          "description": "Extension used for the icon",
          "type": "string"
        }
      }
    },
    "AutodetectToPngResult": {
      "description": "Result of converting an autodetected input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "AutodetectToJpgResult": {
      "description": "Result of converting a Autodetected Document input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "AutodetectToThumbnailsResult": {
      "description": "Result of converting an entire document to an array of PNG thumbnails",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "Index of this thumbnail",
          "type": "boolean"
        },
        "ThumbnailPages": {
          "description": "A PNG thumbnail of the document page",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Thumbnail"
          }
        }
      }
    },
    "Thumbnail": {
      "description": "Result of converting a single document page to a PNG thumbnail",
      "type": "object",
      "properties": {
        "Index": {
          "format": "int32",
          "description": "Index of this thumbnail",
          "type": "integer"
        },
        "Content": {
          "format": "byte",
          "description": "A PNG thumbnail of the document page",
          "type": "string"
        }
      }
    },
    "PdfToPngDirectResult": {
      "description": "Result of converting a PDF to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngDirectPage"
          }
        }
      }
    },
    "ConvertedPngDirectPage": {
      "description": "A single converted page",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1",
          "type": "integer"
        },
        "ImageData": {
          "format": "byte",
          "description": "PNG binary image file data in bytes",
          "type": "string"
        }
      }
    },
    "PdfToJpgResult": {
      "description": "Result of converting a PDF input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "EmlToHtmlResult": {
      "description": "Result of converting an EML file to HTML string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Content": {
          "description": "An HTML string version of the EML file",
          "type": "string"
        },
        "Body": {
          "description": "The main body of the EML file's email as an HTML string",
          "type": "string"
        },
        "From": {
          "description": "The From sender of the EML file's email",
          "type": "string"
        },
        "To": {
          "description": "The To recipients of the EML file's email",
          "type": "string"
        },
        "Cc": {
          "description": "The CC recipients of the EML file's email",
          "type": "string"
        },
        "DateSent": {
          "description": "The date and time that the EML file's email was sent",
          "type": "string"
        },
        "Subject": {
          "description": "The subject of the EML file's email",
          "type": "string"
        },
        "Attachments": {
          "description": "List of all attachments for the EML file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmlAttachment"
          }
        }
      }
    },
    "EmlAttachment": {
      "description": "An EML file attachment",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the attachment, including file extension",
          "type": "string"
        },
        "Content": {
          "format": "byte",
          "description": "The EML attachment as a byte[]",
          "type": "string"
        }
      }
    },
    "EmlToPngResult": {
      "description": "Result of converting an EML input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "EmlToJpgResult": {
      "description": "Result of converting an EML input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "MsgToHtmlResult": {
      "description": "Result of converting an MSG file to HTML string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Content": {
          "description": "An HTML string version of the MSG file",
          "type": "string"
        },
        "Body": {
          "description": "The main body of the MSG file's email as an HTML string",
          "type": "string"
        },
        "From": {
          "description": "The From sender of the MSG file's email",
          "type": "string"
        },
        "To": {
          "description": "The To recipients of the MSG file's email",
          "type": "string"
        },
        "Cc": {
          "description": "The CC recipients of the MSG file's email",
          "type": "string"
        },
        "ReceivedTime": {
          "description": "The time that the MSG file's email was received",
          "type": "string"
        },
        "Subject": {
          "description": "The subject of the MSG file's email",
          "type": "string"
        },
        "Attachments": {
          "description": "List of all attachments for the MSG file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MsgAttachment"
          }
        }
      }
    },
    "MsgAttachment": {
      "description": "An MSG file attachment",
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the attachment, including file extension",
          "type": "string"
        },
        "Content": {
          "format": "byte",
          "description": "The MSG attachment as a byte[]",
          "type": "string"
        }
      }
    },
    "MsgToPngResult": {
      "description": "Result of converting a MSG input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "MsgToJpgResult": {
      "description": "Result of converting a MSG input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdtToPngResult": {
      "description": "Result of converting an ODT input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdtToJpgResult": {
      "description": "Result of converting an ODT input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdsToPngResult": {
      "description": "Result of converting an ODS input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdsToJpgResult": {
      "description": "Result of converting an ODS input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "OdpToPngResult": {
      "description": "Result of converting an ODP input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "OdpToJpgResult": {
      "description": "Result of converting an ODP input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "KeynoteToPngResult": {
      "description": "Result of converting a Keynote input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "KeynoteToJpgResult": {
      "description": "Result of converting a Keynote input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "RtfToPngResult": {
      "description": "Result of converting a RTF input to a PNG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "PngResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedPngPage"
          }
        }
      }
    },
    "RtfToJpgResult": {
      "description": "Result of converting a RTF input to a JPG array",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "JpgResultPages": {
          "description": "Array of converted pages",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConvertedJpgPage"
          }
        }
      }
    },
    "MultipageImageFormatConversionResult": {
      "description": "Result of converting a multi-page image into individual pages with a different format",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "PageCount": {
          "format": "int32",
          "description": "The number of pages in the converted output",
          "type": "integer"
        },
        "Pages": {
          "description": "Converted page results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageConversionResult"
          }
        }
      }
    },
    "PageConversionResult": {
      "description": "Converted page as an image",
      "type": "object",
      "properties": {
        "Filename": {
          "description": "File name of the image in the converted file format",
          "type": "string"
        },
        "FileBytes": {
          "format": "byte",
          "description": "File bytes (contents) of the image in converted file format",
          "type": "string"
        }
      }
    },
    "GetImageInfoResult": {
      "description": "Result of running a get-info operation on an image",
      "type": "object",
      "properties": {
        "Successful": {
          "type": "boolean"
        },
        "ColorSpace": {
          "description": "Color space of the image",
          "type": "string"
        },
        "ColorType": {
          "description": "Color type of the image",
          "type": "string"
        },
        "Width": {
          "format": "int32",
          "description": "Width in pixels of the image",
          "type": "integer"
        },
        "Height": {
          "format": "int32",
          "description": "Height in pixels of the image",
          "type": "integer"
        },
        "CompressionLevel": {
          "format": "int32",
          "description": "Compression level value from 0 (lowest quality) to 100 (highest quality)",
          "type": "integer"
        },
        "ImageHashSignature": {
          "description": "SHA256 hash signature of the image",
          "type": "string"
        },
        "HasTransparency": {
          "description": "True if the image contains transparency, otherwise false",
          "type": "boolean"
        },
        "MimeType": {
          "description": "MIME type of the image format",
          "type": "string"
        },
        "ImageFormat": {
          "description": "Image format",
          "type": "string"
        },
        "DPIUnit": {
          "description": "Units of the DPI measurement; can be either in Inches or Centimeters",
          "type": "string"
        },
        "DPI": {
          "format": "double",
          "description": "DPI (pixels per unit, e.g. pixels per inch) of the image",
          "type": "number"
        },
        "ColorCount": {
          "format": "int32",
          "description": "Unique colors in the image",
          "type": "integer"
        },
        "BitDepth": {
          "format": "int32",
          "description": "Bit depth of the image",
          "type": "integer"
        },
        "Comment": {
          "description": "Comment string in the image",
          "type": "string"
        },
        "ExifProfileName": {
          "description": "Name of the EXIF profile used",
          "type": "string"
        },
        "ExifValues": {
          "description": "EXIF tags and values embedded in the image",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExifValue"
          }
        }
      }
    },
    "ExifValue": {
      "description": "EXIF tag and value",
      "type": "object",
      "properties": {
        "Tag": {
          "description": "Tag name for the EXIF value",
          "type": "string"
        },
        "DataType": {
          "description": "Date type of the EXIF value",
          "type": "string"
        },
        "DataValue": {
          "description": "Value, formatted as a string of the EXIF value",
          "type": "string"
        }
      }
    },
    "HtmlTemplateApplicationRequest": {
      "description": "HTML template application request",
      "type": "object",
      "properties": {
        "HtmlTemplate": {
          "description": "HTML template input as a string",
          "type": "string"
        },
        "HtmlTemplateUrl": {
          "description": "URL to HTML template input",
          "type": "string"
        },
        "Operations": {
          "description": "Operations to apply to this template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HtmlTemplateOperation"
          }
        }
      }
    },
    "HtmlTemplateOperation": {
      "type": "object",
      "properties": {
        "Action": {
          "format": "int32",
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "type": "integer"
        },
        "MatchAgsint": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      }
    },
    "HtmlTemplateApplicationResponse": {
      "description": "Response from an HTML template application",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FinalHtml": {
          "description": "Final HTML result of all operations on input",
          "type": "string"
        }
      }
    },
    "DocxTemplateApplicationRequest": {
      "description": "Word DOCX template application request",
      "type": "object",
      "properties": {
        "Operations": {
          "description": "Operations to apply to this template",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTemplateOperation"
          }
        }
      }
    },
    "DocxTemplateOperation": {
      "type": "object",
      "properties": {
        "Action": {
          "format": "int32",
          "description": "Operation action to take; possible values are \"Replace\"",
          "enum": [
            1
          ],
          "type": "integer"
        },
        "MatchAgainst": {
          "description": "For Replace operations, the string to match against (to be replaced with ReplaceWith string)",
          "type": "string"
        },
        "ReplaceWith": {
          "description": "For Replace operations, the string to Replace the original string with",
          "type": "string"
        }
      }
    },
    "ScreenshotRequest": {
      "description": "Details of the screenshot request",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds).",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "format": "int32",
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024",
          "type": "integer"
        },
        "ScreenshotHeight": {
          "format": "int32",
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        }
      }
    },
    "UrlToPdfRequest": {
      "description": "Request to convert a URL to a PDF file",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL address of the website to screenshot.  HTTP and HTTPS are both supported, as are custom ports.",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites.  Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 20000 milliseconds (20 seconds).",
          "type": "integer"
        },
        "IncludeBackgroundGraphics": {
          "description": "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.",
          "type": "boolean"
        },
        "ScaleFactor": {
          "format": "int32",
          "description": "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%",
          "type": "integer"
        }
      }
    },
    "UrlToTextRequest": {
      "description": "Details of the URL website to Text request",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL of the website to extract the text from",
          "type": "string"
        }
      }
    },
    "UrlToTextResponse": {
      "description": "Result of running the URL website to Text operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result from the URL website input",
          "type": "string"
        }
      }
    },
    "HtmlToPdfRequest": {
      "description": "Details of the HTML to PDF request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to PDF",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).",
          "type": "integer"
        },
        "IncludeBackgroundGraphics": {
          "description": "Optional: Set to true to include background graphics in the PDF, or false to not include.  Default is true.",
          "type": "boolean"
        },
        "ScaleFactor": {
          "format": "int32",
          "description": "Optional: Set to 100 to scale at 100%, set to 50% to scale down to 50% scale, set to 200% to scale up to 200% scale, etc.  Default is 100%. Maximum is 1000%.",
          "type": "integer"
        }
      }
    },
    "HtmlToPngRequest": {
      "description": "Details of the HTML to PNG request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to PNG (screenshot)",
          "type": "string"
        },
        "ExtraLoadingWait": {
          "format": "int32",
          "description": "Optional: Additional number of milliseconds to wait once the web page has finished loading before taking the screenshot.  Can be helpful for highly asynchronous websites. Provide a value of 0 for the default of 5000 milliseconds (5 seconds). Maximum is 30000 milliseconds (30 seconds).",
          "type": "integer"
        },
        "ScreenshotWidth": {
          "format": "int32",
          "description": "Optional: Width of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        },
        "ScreenshotHeight": {
          "format": "int32",
          "description": "Optional: Height of the screenshot in pixels; supply 0 to default to 1280 x 1024, supply -1 to measure the full screen height of the page and attempt to take a screen-height screenshot",
          "type": "integer"
        }
      }
    },
    "HtmlToTextRequest": {
      "description": "Details of the HTML to Text request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to extract the text from",
          "type": "string"
        }
      }
    },
    "HtmlToTextResponse": {
      "description": "Result of running the HTML to Text operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result from the HTML input",
          "type": "string"
        }
      }
    },
    "HtmlToOfficeRequest": {
      "description": "Details of the HTML to Office request",
      "type": "object",
      "properties": {
        "Html": {
          "description": "HTML to render to Office format",
          "type": "string"
        }
      }
    },
    "HtmlMdResult": {
      "description": "Result from converting a Markdown file to HTML",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if operation was successful, false otherwise",
          "type": "boolean"
        },
        "Html": {
          "description": "Resulting HTML from the conversion",
          "type": "string"
        }
      }
    },
    "FinishEditingRequest": {
      "description": "Input to a Finish Editing request",
      "type": "object",
      "properties": {
        "InputFileUrl": {
          "description": "URL of a document being edited to get the contents of.",
          "type": "string"
        }
      }
    },
    "CreateBlankDocxRequest": {
      "description": "Input to a Create Blank Word Document request",
      "type": "object",
      "properties": {
        "InitialText": {
          "description": "Optional; initial text to include in the document",
          "type": "string"
        }
      }
    },
    "CreateBlankDocxResponse": {
      "description": "Result of creating a blank Word document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "ReplaceStringRequest": {
      "description": "Input to a string replacement request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "MatchString": {
          "description": "String to search for and match against, to be replaced",
          "type": "string"
        },
        "ReplaceString": {
          "description": "String to replace the matched values with",
          "type": "string"
        },
        "MatchCase": {
          "description": "True if the case should be matched, false for case insensitive match",
          "type": "boolean"
        }
      }
    },
    "MultiReplaceStringRequest": {
      "description": "Input to a multiple string replacement request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ReplaceStrings": {
          "description": "An array of individual string replacement requests",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SingleReplaceString"
          }
        }
      }
    },
    "SingleReplaceString": {
      "description": "A single string replacement request",
      "type": "object",
      "properties": {
        "MatchString": {
          "description": "String to search for and match against, to be replaced",
          "type": "string"
        },
        "ReplaceString": {
          "description": "String to replace the matched values with",
          "type": "string"
        },
        "MatchCase": {
          "description": "True if the case should be matched, false for case insensitive match",
          "type": "boolean"
        }
      }
    },
    "DocumentEditingEditSession": {
      "description": "Active document editing session result.  To retrieve the document, use the Finish Editing API.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "EditSessionURL": {
          "description": "Document editing session URL; in-memory temporary cache link with TTL (Time-to-Live expiration) of 30 minutes.  To retrieve the document, use the Finish Editing API.",
          "type": "string"
        }
      }
    },
    "GetMacrosResponse": {
      "description": "Result of running a Get Macro Information command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "ContainsVbaMacros": {
          "description": "True if the document contains VBA macros, false otherwise",
          "type": "boolean"
        }
      }
    },
    "GetDocxMetadataPropertiesResponse": {
      "description": "Result of running a DocxGetMetadataProperties command",
      "type": "object",
      "properties": {
        "Company": {
          "description": "Name of the Company that authored the document, if available",
          "type": "string"
        },
        "Manager": {
          "description": "Name of the Manager that authored the document, if available",
          "type": "string"
        },
        "ApplicationVersion": {
          "description": "Application version that authored the document, if available",
          "type": "string"
        },
        "WordCount": {
          "format": "int64",
          "description": "Word count of the document",
          "type": "integer"
        },
        "LineCount": {
          "format": "int64",
          "description": "Line count of the document",
          "type": "integer"
        },
        "ParagraphCount": {
          "format": "int64",
          "description": "Paragraph count of the document",
          "type": "integer"
        },
        "PageCount": {
          "format": "int64",
          "description": "Page count of the document",
          "type": "integer"
        },
        "CustomProperties": {
          "description": "Custom properties applied to the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxMetadataCustomProperty"
          }
        },
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "DocxMetadataCustomProperty": {
      "description": "Name and value pair for a custom-defined DOCX metadata property",
      "type": "object",
      "properties": {
        "PropertyName": {
          "description": "Name of the property",
          "type": "string"
        },
        "PropertyDataType": {
          "description": "Data type of the property; possible values are \"string\", \"integer\", \"double\" or \"date\"",
          "type": "string"
        },
        "StringValue": {
          "description": "If the property is of a string data type, then provides the string value if available",
          "type": "string"
        },
        "IntegerValue": {
          "format": "int64",
          "description": "If the property is of a integer data type, then provides the integer value if available",
          "type": "integer"
        },
        "DoubleValue": {
          "format": "double",
          "description": "If the property is of a double floating point data type, then provides the double value if available",
          "type": "number"
        },
        "DateValue": {
          "format": "date-time",
          "description": "If the property is of a date time data type, then provides the date time value if available",
          "type": "string"
        }
      }
    },
    "GetDocxContentControlsResponse": {
      "description": "Result of running a DocxGetContentControls command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "ContentControls": {
          "description": "Content controls in the DOCX",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxContentControl"
          }
        }
      }
    },
    "DocxContentControl": {
      "description": "Content Control instance",
      "type": "object",
      "properties": {
        "Value": {
          "description": "Text content value in the content control; text entered into the control",
          "type": "string"
        }
      }
    },
    "GetDocxGetFormFieldsResponse": {
      "description": "Result of running a DocxGetFormFields command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "ContentControls": {
          "description": "Content controls in the DOCX",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxContentControl"
          }
        },
        "HandlebarFormFields": {
          "description": "Form fields that comply with the Handlebar style, that is they are surrounded by two curly braces on either side such as \"{{FieldName}}\", in the DOCX",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HandlebarFormField"
          }
        }
      }
    },
    "HandlebarFormField": {
      "description": "Instance of a form field that is handlebar style, such as \"{{FieldName}}\"",
      "type": "object",
      "properties": {
        "FormFieldTitle": {
          "description": "Title of the handlebar style form field, such as \"FieldName\" in the case of \"{{FieldName}}\"",
          "type": "string"
        }
      }
    },
    "DocxSetFormFieldsRequest": {
      "description": "Request for DocxSetFormFields operation",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "HandlebarFieldsToFill": {
          "description": "Handlebar style form fields to fill in; form field that is handlebar style, such as \"{{FieldName}}\"",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FillHandlebarFormField"
          }
        }
      }
    },
    "FillHandlebarFormField": {
      "description": "Handlebar style form fields to fill in; form field that is handlebar style, such as \"{{FieldName}}\"",
      "type": "object",
      "properties": {
        "FieldName": {
          "description": "Name of the field without the curly braces, e.g. \"FieldName\" for a field that is included in the text of the DOCX as \"{{FieldName}}\"",
          "type": "string"
        },
        "ValueToFill": {
          "description": "Text value to fill in for the field in the resulting document",
          "type": "string"
        }
      }
    },
    "DocxSetCustomMetadataPropertiesRequest": {
      "description": "Request to set Word custom metadata properties",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PropertiesToSet": {
          "description": "Required: properties to set in the Word Document; provide one or more property definitions to set - be sure to specify the data type and value, together with the property name",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxMetadataCustomProperty"
          }
        }
      }
    },
    "GetDocxTablesRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxTablesResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Tables": {
          "description": "Tables in the DOCX file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTable"
          }
        }
      }
    },
    "DocxTable": {
      "description": "A table in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "TableID": {
          "description": "The ID of the table; leave blank for new tables",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this table object; leave blank for new tables",
          "type": "string"
        },
        "Width": {
          "description": "The Width of the table, or 0 if not specified",
          "type": "string"
        },
        "WidthType": {
          "description": "The Width configuration type of the table",
          "type": "string"
        },
        "TableRows": {
          "description": "Rows in the table; this is where the contents is located",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableRow"
          }
        },
        "TopBorderType": {
          "description": "Type for the top border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "TopBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "TopBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "TopBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "BottomBorderType": {
          "description": "Type for the bottom border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "BottomBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "BottomBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "BottomBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "LeftBorderType": {
          "description": "Type for the left border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "LeftBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "LeftBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "LeftBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "RightBorderType": {
          "description": "Type for the right border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "RightBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "RightBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "RightBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellHorizontalBorderType": {
          "description": "Type for the cell horizontal border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellHorizontalBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellHorizontalBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellHorizontalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "CellVerticalBorderType": {
          "description": "Type for the cell vertical border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "CellVerticalBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellVerticalBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "CellVerticalBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "StartBorderType": {
          "description": "Type for the start border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "StartBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "StartBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "StartBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "EndBorderType": {
          "description": "Type for the end border - can be a Single, DashDotStroked, Dashed, DashSmallGap, DotDash, DotDotDash, Dotted, Double, DoubleWave, Inset, Nil, None, Outset, Thick, ThickThinLargeGap, ThickThinMediumGap, ThickThinSmallGap, ThinThickLargeGap, ThinThickMediumGap, ThinThickSmallGap, ThinThickThinLargeGap, ThinThickThinMediumGap, ThinThickThinSmallGap, ThreeDEmboss, ThreeDEngrave, Triple, Wave",
          "type": "string"
        },
        "EndBorderSize": {
          "format": "int32",
          "description": "Width of the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "EndBorderSpace": {
          "format": "int32",
          "description": "Spacing around the border in points (1/72nd of an inch)",
          "type": "integer"
        },
        "EndBorderColor": {
          "description": "HTML-style color hex value (do not include a #)",
          "type": "string"
        },
        "TableIndentationMode": {
          "description": "Table indentation type",
          "type": "string"
        },
        "TableIndentationWidth": {
          "format": "int32",
          "description": "Table indentation width",
          "type": "integer"
        }
      }
    },
    "DocxTableRow": {
      "description": "A row in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "RowIndex": {
          "format": "int32",
          "description": "Index of the row, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this table row object; leave blank for new tables",
          "type": "string"
        },
        "RowCells": {
          "description": "Cells in the row; this is where the contents of the row is stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableCell"
          }
        }
      }
    },
    "DocxTableCell": {
      "description": "A cell in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "CellIndex": {
          "format": "int32",
          "description": "The index of the cell, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs inside the cell; this is where the contents of the cell are stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "CellShadingColor": {
          "description": "Color of the cell shading",
          "type": "string"
        },
        "CellShadingFill": {
          "description": "Fill of the cell shading",
          "type": "string"
        },
        "CellShadingPattern": {
          "description": "Pattern of the cell shading",
          "type": "string"
        },
        "CellWidthMode": {
          "description": "Width mode of the cell; can be auto (for automatic) or manual",
          "type": "string"
        },
        "CellWidth": {
          "description": "Width of the cell",
          "type": "string"
        }
      }
    },
    "DocxParagraph": {
      "description": "A paragraph in a Word Document (DOCX) file; there is where text, content and formatting are stored - similar to the paragraph tag in HTML",
      "type": "object",
      "properties": {
        "ParagraphIndex": {
          "format": "int32",
          "description": "The index of the paragraph; 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Paragraph object; leave blank during creation",
          "type": "string"
        },
        "ContentRuns": {
          "description": "The content runs in the paragraph - this is where text is stored; similar to a span in HTML",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxRun"
          }
        },
        "StyleID": {
          "description": "Style ID of the style applied to the paragraph; null if no style is applied",
          "type": "string"
        }
      }
    },
    "DocxRun": {
      "description": "A content run in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "RunIndex": {
          "format": "int32",
          "description": "Index of the run, 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Run object; leave blank for creation",
          "type": "string"
        },
        "TextItems": {
          "description": "Text items inside the run; this is where the actual text content is stored",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxText"
          }
        },
        "Bold": {
          "description": "True to make the text bold, false otherwise",
          "type": "boolean"
        },
        "Italic": {
          "description": "True to make the text italic, false otherwise",
          "type": "boolean"
        },
        "Underline": {
          "description": "Underline mode for the text; possible values are: Words, Double, Thick, Dotted, DottedHeavy, Dash, DashedHeavy, DashLong, DashLongHeavy, DotDash, DashDotHeavy, DotDotDash, DashDotDotHeavy, Wave, WavyHeavy, WavyDouble, None",
          "type": "string"
        },
        "FontFamily": {
          "description": "Font Family name for the text, e.g. \"Arial\" or \"Times New Roman\"",
          "type": "string"
        },
        "FontSize": {
          "description": "Font size in font points (e.g. \"24\")",
          "type": "string"
        }
      }
    },
    "DocxText": {
      "description": "Unit of text content in a Word Document (DOCX) file",
      "type": "object",
      "properties": {
        "TextIndex": {
          "format": "int32",
          "description": "Index of the text content in the run; 0-based",
          "type": "integer"
        },
        "Path": {
          "description": "The Path of the location of this Text object; leave blank for creation",
          "type": "string"
        },
        "TextContent": {
          "description": "Text string containing the text content of this text content item",
          "type": "string"
        }
      }
    },
    "GetDocxTableByIndexRequest": {
      "description": "Input to a Get Tables by Index request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TableIndex": {
          "format": "int32",
          "description": "0-based index of the table to retrieve from the Word Document",
          "type": "integer"
        }
      }
    },
    "GetDocxTableByIndexResponse": {
      "description": "Result of running a Get-Tables by Index command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Table": {
          "$ref": "#/definitions/DocxTable",
          "description": "Requested Table in the DOCX file"
        }
      }
    },
    "GetDocxImagesRequest": {
      "description": "Input to a Get Images request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Images": {
          "description": "Images in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxImage"
          }
        }
      }
    },
    "DocxImage": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "ImageName": {
          "description": "The Name of the image",
          "type": "string"
        },
        "ImageId": {
          "format": "int64",
          "description": "The Id of the image",
          "type": "integer"
        },
        "ImageDescription": {
          "description": "The Description of the image",
          "type": "string"
        },
        "ImageWidth": {
          "format": "int64",
          "description": "Width of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "type": "integer"
        },
        "ImageHeight": {
          "format": "int64",
          "description": "Height of the image in EMUs (English Metric Units); set to 0 to default to page width and aspect-ratio based height",
          "type": "integer"
        },
        "XOffset": {
          "format": "int64",
          "description": "X (horizontal) offset of the image",
          "type": "integer"
        },
        "YOffset": {
          "format": "int64",
          "description": "Y (vertical) offset of the image",
          "type": "integer"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        },
        "InlineWithText": {
          "description": "True if the image is inline with the text; false if it is floating",
          "type": "boolean"
        }
      }
    },
    "GetDocxStylesRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxStylesResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Styles": {
          "description": "Styles in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxStyle"
          }
        }
      }
    },
    "DocxStyle": {
      "description": "Style in a DOCX Word Document",
      "type": "object",
      "properties": {
        "StyleID": {
          "description": "ID of the style",
          "type": "string"
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Bold": {
          "description": "Style applies bold formatting",
          "type": "boolean"
        },
        "Italic": {
          "description": "Style applies italic formatting",
          "type": "boolean"
        },
        "Underline": {
          "description": "Style applies underline formatting",
          "type": "boolean"
        },
        "FontSize": {
          "description": "Font size",
          "type": "string"
        },
        "FontFamily": {
          "description": "Font family",
          "type": "string"
        }
      }
    },
    "GetDocxSectionsRequest": {
      "description": "Input to a Get Sections request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxSectionsResponse": {
      "description": "Result of running a Get-Sections command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Sections": {
          "description": "Sections in the DOCX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxSection": {
      "description": "Section of a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "StartingPageNumbers": {
          "description": "Page numbers that the section starts at, typically just one",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        }
      }
    },
    "GetDocxBodyRequest": {
      "description": "Input to a Get Body request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxBodyResponse": {
      "description": "Result of running a Get-Body command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Body": {
          "$ref": "#/definitions/DocxBody",
          "description": "Body in the DOCX document"
        }
      }
    },
    "DocxBody": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "AllParagraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "AllTables": {
          "description": "All tables anywhere in the document; these objects are not sequentially placed but are scatted across the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTable"
          }
        }
      }
    },
    "FindDocxParagraphRequest": {
      "description": "Input to a request to find matching paragraphs in a Word DOCX document",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FindString": {
          "description": "Required: The target string to search for in the paragraphs of the document",
          "type": "string"
        },
        "MatchCase": {
          "description": "Optional: True to match case, false to ignore case when matching",
          "type": "boolean"
        }
      }
    },
    "FindDocxParagraphResponse": {
      "description": "Result of performing a find matching paragraphs operation on a Word Document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful; false otherwise",
          "type": "boolean"
        },
        "MatchingParagraphs": {
          "description": "Matching paragraphs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "Count": {
          "format": "int32",
          "description": "Count of matching paragraphs",
          "type": "integer"
        }
      }
    },
    "ReplaceDocxParagraphRequest": {
      "description": "Input to a request to replace matching paragraphs in a Word DOCX document",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FindString": {
          "description": "Required: The target string to search for in the paragraphs of the document",
          "type": "string"
        },
        "MatchCase": {
          "description": "Optional: True to match case, false to ignore case when matching",
          "type": "boolean"
        },
        "Replacement_Image": {
          "$ref": "#/definitions/DocxImage",
          "description": "Optional: Image to replace the paragraph with; note that most of the fields in this object are optional and do not need to be supplied"
        }
      }
    },
    "ReplaceDocxParagraphResponse": {
      "description": "Result of performing a replace matching paragraphs operation on a Word Document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful; false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL of the edited document",
          "type": "string"
        }
      }
    },
    "GetDocxPagesRequest": {
      "description": "Input to a Get Word DOCX Document Pages request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "MaximumPages": {
          "format": "int32",
          "description": "Optional: Maximum number of pages to return; set to 0 or do not supply to return all pages",
          "type": "integer"
        }
      }
    },
    "GetDocxPagesResponse": {
      "description": "Result of getting pages from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Pages": {
          "description": "Pages in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxPage"
          }
        },
        "PageCount": {
          "format": "int32",
          "description": "Count of pages",
          "type": "integer"
        }
      }
    },
    "DocxPage": {
      "description": "One page in a Word Document DOCX",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of this page, 1-based",
          "type": "integer"
        },
        "Paragraphs": {
          "description": "All paragraphs anywhere in the document; these objects are not sequentially placed but are scatted across document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        }
      }
    },
    "GetDocxGetCommentsRequest": {
      "description": "Input to a Get Word DOCX Document comments request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxCommentsResponse": {
      "description": "Result of getting comments from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Comments": {
          "description": "Comments in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxComment"
          }
        },
        "CommentCount": {
          "format": "int32",
          "description": "The number of comments in the document",
          "type": "integer"
        }
      }
    },
    "DocxComment": {
      "description": "Comment in a Word Document",
      "type": "object",
      "properties": {
        "Path": {
          "description": "Path to the comment in the document",
          "type": "string"
        },
        "Author": {
          "description": "Author name of the comment",
          "type": "string"
        },
        "AuthorInitials": {
          "description": "Initials of the author of the comment",
          "type": "string"
        },
        "CommentText": {
          "description": "Text content of the comment",
          "type": "string"
        },
        "CommentDate": {
          "format": "date-time",
          "description": "Date timestamp of the comment",
          "type": "string"
        },
        "IsTopLevel": {
          "description": "True if the comment is at the top level, false if this comment is a child reply of another comment",
          "type": "boolean"
        },
        "IsReply": {
          "description": "True if this comment is a reply to another comment, false otherwise",
          "type": "boolean"
        },
        "ParentCommentPath": {
          "description": "Path to the parent of this comment, if this comment is a reply, otherwise this value will be null",
          "type": "string"
        },
        "Done": {
          "description": "True if this comment is marked as Done in Word, otherwise it is false",
          "type": "boolean"
        }
      }
    },
    "GetDocxGetCommentsHierarchicalRequest": {
      "description": "Input to a Get Word DOCX Document comments hierarchically request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxCommentsHierarchicalResponse": {
      "description": "Result of getting comments hierarchically from a Word Document DOCX",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Comments": {
          "description": "Comments in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTopLevelComment"
          }
        },
        "TopLevelCommentCount": {
          "format": "int32",
          "description": "The number of comments in the document",
          "type": "integer"
        }
      }
    },
    "DocxTopLevelComment": {
      "description": "Top-level Comment in a Word Document",
      "type": "object",
      "properties": {
        "Path": {
          "description": "Path to the comment in the document",
          "type": "string"
        },
        "Author": {
          "description": "Author name of the comment",
          "type": "string"
        },
        "AuthorInitials": {
          "description": "Initials of the author of the comment",
          "type": "string"
        },
        "CommentText": {
          "description": "Text content of the comment",
          "type": "string"
        },
        "CommentDate": {
          "format": "date-time",
          "description": "Date timestamp of the comment",
          "type": "string"
        },
        "ReplyChildComments": {
          "description": "Child comments, that are replies to this one",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxComment"
          }
        },
        "Done": {
          "description": "True if this comment is marked as Done in Word, otherwise it is false",
          "type": "boolean"
        }
      }
    },
    "DocxInsertCommentOnParagraphRequest": {
      "description": "Input to a Insert Comment on Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ParagraphPath": {
          "description": "Path to the paragraph to attach the comment to.  You can get the Path by retrieving all of the Paragraphs in document by calling Get Body and taking the Path property of the desired paragraph to add the comment to.",
          "type": "string"
        },
        "CommentToInsert": {
          "$ref": "#/definitions/DocxComment",
          "description": "Comment to insert"
        }
      }
    },
    "InsertDocxCommentOnParagraphResponse": {
      "description": "Result of running an Insert-Comment-on-Paragraph command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveDocxPagesRequest": {
      "description": "Input to a Remove Word DOCX Document Pages request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "StartDeletePageNumber": {
          "format": "int32",
          "description": "Page number (1-based) to start deleting pages; inclusive",
          "type": "integer"
        },
        "EndDeletePageNumber": {
          "format": "int32",
          "description": "Page number (1-based) to stop deleting pages; inclusive",
          "type": "integer"
        }
      }
    },
    "GetDocxHeadersAndFootersRequest": {
      "description": "Input to a Get Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetDocxHeadersAndFootersResponse": {
      "description": "Result of running a Get-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxHeader"
          }
        },
        "Footers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxFooter"
          }
        }
      }
    },
    "DocxHeader": {
      "description": "Header of a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs in this header",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "SectionsWithHeader": {
          "description": "Sections that the header is applied to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxFooter": {
      "description": "Footer in a Word Document (DOCX)",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new tables",
          "type": "string"
        },
        "Paragraphs": {
          "description": "Paragraphs in this footer",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxParagraph"
          }
        },
        "SectionsWithFooter": {
          "description": "Sections that the footer is applied to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxSection"
          }
        }
      }
    },
    "DocxSetHeaderRequest": {
      "description": "Input to a set-header command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "HeaderToApply": {
          "$ref": "#/definitions/DocxHeader",
          "description": "Header to apply"
        }
      }
    },
    "DocxSetHeaderResponse": {
      "description": "Result of running a set-header command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxSetFooterRequest": {
      "description": "Input to set-footer command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "FooterToApply": {
          "$ref": "#/definitions/DocxFooter",
          "description": "Footer to apply"
        }
      }
    },
    "DocxSetFooterResponse": {
      "description": "Result of running a set-footer command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxSetFooterAddPageNumberRequest": {
      "description": "Input to set-footer/add-page-number command",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PrependText": {
          "description": "Optional: extra text to add before the page number, for example if you want to show \"Page 1\" then you can set PrependText to \"Page\"",
          "type": "string"
        }
      }
    },
    "DocxInsertImageRequest": {
      "description": "Input to set-footer command",
      "type": "object",
      "properties": {
        "InputDocumentFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputDocumentFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "InputImageFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input image file to operate on; if you supply this value do not supply InputImageFileUrl or ImageToAdd.",
          "type": "string"
        },
        "InputImageFileUrl": {
          "description": "Optional: URL of an image file to operate on as input; if you supply this value do not supply InputImageFileBytes or ImageToAdd.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ImageToAdd": {
          "$ref": "#/definitions/DocxImage",
          "description": "Optional: Image to add; if you supply in this object, do not supply InputImageFileBytes or InputImageFileUrl."
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        },
        "WidthInEMUs": {
          "format": "int64",
          "description": "Optional: The width of the image in EMUs",
          "type": "integer"
        },
        "HeightInEMUs": {
          "format": "int64",
          "description": "Optional: The height of the image in EMUs",
          "type": "integer"
        }
      }
    },
    "DocxInsertImageResponse": {
      "description": "Result of running a set-footer command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxInsertParagraphRequest": {
      "description": "Input to a Insert Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "ParagraphToInsert": {
          "$ref": "#/definitions/DocxParagraph",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        }
      }
    },
    "InsertDocxInsertParagraphResponse": {
      "description": "Result of running an Insert-Paragraph command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxTablesRequest": {
      "description": "Input to a Insert Tables request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TableToInsert": {
          "$ref": "#/definitions/DocxTable",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is DocumentEnd.  Placement Type of the insert; possible values are: DocumentStart (very beginning of the document), DocumentEnd (very end of the document), BeforeExistingObject (right before an existing object - fill in the InsertPath field using the Path value from an existing object), AfterExistingObject (right after an existing object - fill in the InsertPath field using the Path value from an existing object)",
          "type": "string"
        },
        "InsertPath": {
          "description": "Optional; location within the document to insert the object; fill in the InsertPath field using the Path value from an existing object.  Used with InsertPlacement of BeforeExistingObject or AfterExistingObject",
          "type": "string"
        }
      }
    },
    "InsertDocxTablesResponse": {
      "description": "Result of running an Insert-Tables command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetDocxTableRowRequest": {
      "description": "Input to a get DOCX table row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to retrievew the row from",
          "type": "string"
        },
        "TableRowRowIndex": {
          "format": "int32",
          "description": "0-based index of the row to retrieve (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "GetDocxTableRowResponse": {
      "description": "Result of running an Get Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "RowResult": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Contents of the table row that was requested"
        }
      }
    },
    "DeleteDocxTableRowRequest": {
      "description": "Input to a delete DOCX table row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to delete the row from",
          "type": "string"
        },
        "TableRowRowIndex": {
          "format": "int32",
          "description": "0-based index of the row to delete (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "DeleteDocxTableRowResponse": {
      "description": "Result of running an Delete Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DeleteDocxTableRowRangeRequest": {
      "description": "Input to a delete DOCX table row range request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "TablePath": {
          "description": "Path to the table to delete the row from",
          "type": "string"
        },
        "TableRowRowIndexStart": {
          "format": "int32",
          "description": "0-based index of the row to begin deleting rows (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        },
        "TableRowRowIndexEnd": {
          "format": "int32",
          "description": "0-based index of the row to stop deleting rows (e.g. 0, 1, 2, ...) in the table",
          "type": "integer"
        }
      }
    },
    "DeleteDocxTableRowRangeResponse": {
      "description": "Result of running an Delete Table Row Range command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "InsertDocxTableRowRequest": {
      "description": "Input to a Insert Table Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RowToInsert": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Table you would like to insert"
        },
        "InsertPlacement": {
          "description": "Optional; default is TableEnd.  Placement Type of the insert; possible values are: TableStart (very beginning of the table), TableEnd (very end of the document), or a 0-based row index number as an integer, 0 being the first row in the table, 1 being the second row in the table, 2 being the third row in the table, etc. to insert this row after",
          "type": "string"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "InsertDocxTableRowResponse": {
      "description": "Result of running an Insert-Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableRowRequest": {
      "description": "Input to a Update Table Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RowToUpdate": {
          "$ref": "#/definitions/DocxTableRow",
          "description": "Table row contents you would like to update the row with"
        },
        "TableRowIndex": {
          "format": "int32",
          "description": "0-based index of the Table Row to update",
          "type": "integer"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableRowResponse": {
      "description": "Result of running an Update Table Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableCellRequest": {
      "description": "Input to a Update Table Cell request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "CellToUpdate": {
          "$ref": "#/definitions/DocxTableCell",
          "description": "Table cell contents you would like to update the cell with"
        },
        "TableRowIndex": {
          "format": "int32",
          "description": "0-based index of the Table Row to update",
          "type": "integer"
        },
        "TableCellIndex": {
          "format": "int32",
          "description": "0-based index of the Table Cell (within the row) to update",
          "type": "integer"
        },
        "ExistingTablePath": {
          "description": "Required; the path to the existing table to modify",
          "type": "string"
        }
      }
    },
    "UpdateDocxTableCellResponse": {
      "description": "Result of running an Update Table Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveDocxHeadersAndFootersRequest": {
      "description": "Input to a Remove Headers and Footers request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "RemoveHeaders": {
          "description": "True if you would like to remove all headers from the input document, false otherwise",
          "type": "boolean"
        },
        "RemoveFooters": {
          "description": "True if you would like to remove all footers from the input document, false otherwise",
          "type": "boolean"
        }
      }
    },
    "RemoveDocxHeadersAndFootersResponse": {
      "description": "Result of running a Remove Headers and Footers command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL of the resulting edited document; this is a secure URL and cannot be downloaded without adding the Apikey header; it is also temporary, stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DocxRemoveObjectRequest": {
      "description": "Input to a Insert Paragraph request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "PathToObjectToRemove": {
          "description": "Path within the document of the object to delete; fill in the PathToObjectToRemove field using the Path value from an existing object.",
          "type": "string"
        }
      }
    },
    "DocxRemoveObjectResponse": {
      "description": "Result of running an Remove-Object command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited DOCX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "CreateBlankSpreadsheetRequest": {
      "description": "Input to a Create Blank Spreadsheet request",
      "type": "object",
      "properties": {
        "WorksheetName": {
          "description": "The blank Spreadsheet will have a default Worksheet in it; supply a name, or if left empty, will default to Worksheet1",
          "type": "string"
        }
      }
    },
    "CreateBlankSpreadsheetResponse": {
      "description": "Result of creating a blank worksheet",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "CreateSpreadsheetFromDataRequest": {
      "description": "Input to Create a new Spreadsheet request",
      "type": "object",
      "properties": {
        "WorksheetName": {
          "description": "Optional; The new Spreadsheet will have a default Worksheet in it; supply a name, or if left empty, will default to Worksheet1",
          "type": "string"
        },
        "Rows": {
          "description": "Required; Rows and cells to populate the spreadsheet with",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetRow"
          }
        }
      }
    },
    "XlsxSpreadsheetRow": {
      "description": "Row in an Excel spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "Cells": {
          "description": "Spreadsheet Cells in the spreadsheet row",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetCell"
          }
        }
      }
    },
    "XlsxSpreadsheetCell": {
      "description": "Cell in an Excel Spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "TextValue": {
          "description": "Text value of the cell",
          "type": "string"
        },
        "CellIdentifier": {
          "description": "Cell reference of the cell, e.g. A1, Z22, etc.",
          "type": "string"
        },
        "StyleIndex": {
          "format": "int32",
          "description": "Identifier for the style to apply to this style",
          "type": "integer"
        },
        "Formula": {
          "type": "string"
        }
      }
    },
    "CreateSpreadsheetFromDataResponse": {
      "description": "Result of creating a new worksheet from rows and cells",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxWorksheetsRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetXlsxWorksheetsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Worksheets": {
          "description": "Worksheets in the Excel XLSX spreadsheet",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxWorksheet"
          }
        }
      }
    },
    "XlsxWorksheet": {
      "description": "A worksheet (tab) in an Excel (XLSX) spreadsheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new worksheets",
          "type": "string"
        },
        "WorksheetName": {
          "description": "User-facing name of the worksheet tab",
          "type": "string"
        }
      }
    },
    "GetXlsxRowsAndCellsRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxRowsAndCellsResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Rows": {
          "description": "Spreadsheet Rows in the Excel XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetRow"
          }
        }
      }
    },
    "GetXlsxSpecificRowRequest": {
      "description": "Input to a Get-Specific-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "Path": {
          "description": "Required; Full path for the desired row",
          "type": "string"
        }
      }
    },
    "GetXlsxSpecificRowResponse": {
      "description": "Result of running a Get-Specific-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Row": {
          "$ref": "#/definitions/XlsxSpreadsheetRow",
          "description": "Spreadsheet Row from the Excel XLSX document"
        }
      }
    },
    "ClearXlsxRowRequest": {
      "description": "Input to a Clear-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToEdit": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "Required; Index for the desired row to be cleared",
          "type": "integer"
        }
      }
    },
    "ClearXlsxRowResponse": {
      "description": "Result of running a Clear-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "AppendXlsxRowRequest": {
      "description": "Input to a Append-Row request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "Row": {
          "$ref": "#/definitions/XlsxSpreadsheetRow",
          "description": "Required; Row to be appended to the worksheet."
        }
      }
    },
    "AppendXlsxRowResponse": {
      "description": "Result of running an Append-Row command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemoveXlsxWorksheetRequest": {
      "description": "Input to a Remove Excel XLSX Spreadsheet worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToRemove": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Required; Worksheet (tab) within the spreadsheet to delete; leave blank to default to the first worksheet.  Use the Get Worksheets API to enumerate available worksheets in a spreadsheet."
        }
      }
    },
    "GetXlsxCellRequest": {
      "description": "Input to a Get Cell request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to retrieve",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to retrieve",
          "type": "integer"
        }
      }
    },
    "GetXlsxCellResponse": {
      "description": "Result of running a Get-Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Cell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Requested Cell in the Excel XLSX document"
        }
      }
    },
    "GetXlsxCellByIdentifierRequest": {
      "description": "Input to a Get Cell by cell identifier request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the rows and cells of; leave blank to default to the first worksheet"
        },
        "CellIdentifier": {
          "description": "Required; Excel cell identifier, e.g. A1, B22, C33, etc.",
          "type": "string"
        }
      }
    },
    "GetXlsxCellByIdentifierResponse": {
      "description": "Result of running a Get-Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Cell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Requested Cell in the Excel XLSX document"
        }
      }
    },
    "ClearXlsxCellRequest": {
      "description": "Input to a Clear Cell in XLSX Worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to clear",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to clear",
          "type": "integer"
        }
      }
    },
    "ClearXlsxCellResponse": {
      "description": "Result of running a Clear XLSX Cell command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "SetXlsxCellRequest": {
      "description": "Input to a Set Cell in XLSX Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "RowIndex": {
          "format": "int32",
          "description": "0-based index of the row, 0, 1, 2, ... to set",
          "type": "integer"
        },
        "CellIndex": {
          "format": "int32",
          "description": "0-based index of the cell, 0, 1, 2, ... in the row to set",
          "type": "integer"
        },
        "CellValue": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        }
      }
    },
    "SetXlsxCellResponse": {
      "description": "Result of running a Set Cell in XLSX Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "SetXlsxCellByIdentifierRequest": {
      "description": "Input to a Set Cell by identifier in XLSX Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToUpdate": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to update; leave blank to default to the first worksheet"
        },
        "CellIdentifier": {
          "description": "The Excel cell identifier (e.g. A1, B2, C33, etc.) of the cell to update",
          "type": "string"
        },
        "CellValue": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "New Cell value to update/overwrite into the Excel XLSX spreadsheet"
        }
      }
    },
    "SetXlsxCellByIdentifierResponse": {
      "description": "Result of running a Set Cell by identifier in XLSX Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxColumnsRequest": {
      "description": "Input to a Get Columns request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the columns of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxColumnsResponse": {
      "description": "Result of running a Get-Columns command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Columns": {
          "description": "Spreadsheet Columns in the XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxSpreadsheetColumn"
          }
        }
      }
    },
    "XlsxSpreadsheetColumn": {
      "description": "Column in an Excel spreadsheet worksheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "HeadingCell": {
          "$ref": "#/definitions/XlsxSpreadsheetCell",
          "description": "Heading cell for this column"
        }
      }
    },
    "GetXlsxImagesRequest": {
      "description": "Input to a Get Images request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToQuery": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the images of; leave blank to default to the first worksheet"
        }
      }
    },
    "GetXlsxImagesResponse": {
      "description": "Result of running a Get-Images command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Images": {
          "description": "Spreadsheet Images in the XLSX document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/XlsxImage"
          }
        }
      }
    },
    "XlsxImage": {
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "ImageDataEmbedId": {
          "description": "Read-only; internal ID for the image contents",
          "type": "string"
        },
        "ImageDataContentType": {
          "description": "Read-only; image data MIME content-type",
          "type": "string"
        },
        "ImageInternalFileName": {
          "description": "Read-only; internal file name/path for the image",
          "type": "string"
        },
        "ImageContentsURL": {
          "description": "URL to the image contents; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the contents.",
          "type": "string"
        }
      }
    },
    "GetXlsxStylesRequest": {
      "description": "Input to a Get Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "GetXlsxStylesResponse": {
      "description": "Result of running a Get-Worksheets command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "CellStyles": {
          "description": "Cell styles",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxCellStyle"
          }
        }
      }
    },
    "DocxCellStyle": {
      "description": "Style in an Excel spreadsheet",
      "type": "object",
      "properties": {
        "Path": {
          "description": "The Path of the location of this object; leave blank for new rows",
          "type": "string"
        },
        "Name": {
          "description": "Name of the style",
          "type": "string"
        },
        "FormatID": {
          "format": "int32",
          "description": "Format ID of the cell style",
          "type": "integer"
        },
        "BuiltInID": {
          "format": "int32",
          "description": "Built=in ID of the cell style",
          "type": "integer"
        }
      }
    },
    "InsertXlsxWorksheetRequest": {
      "description": "Input to a Insert Worksheets request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToInsert": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Workersheet to insert"
        }
      }
    },
    "InsertXlsxWorksheetResponse": {
      "description": "Result of running a insert worksheet command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RenameXlsxWorksheetRequest": {
      "description": "Input to a Rename-Worksheet request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "WorksheetToRename": {
          "$ref": "#/definitions/XlsxWorksheet",
          "description": "Optional; Worksheet (tab) within the spreadsheet to get the specific row from; leave blank to default to the first worksheet"
        },
        "NewWorksheetName": {
          "description": "Required; The new name to be used for the worksheet",
          "type": "string"
        }
      }
    },
    "RenameXlsxWorksheetResponse": {
      "description": "Result of running a Rename-Worksheet command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "EnableSharedWorkbookRequest": {
      "description": "Input to a Enabled Shared Workbook request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "EnableSharedWorkbookResponse": {
      "description": "Result of running a Enable Shared Workbook command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "DisableSharedWorkbookRequest": {
      "description": "Input to a Disable Shared Workbook request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        }
      }
    },
    "DisableSharedWorkbookResponse": {
      "description": "Result of running a Disable Shared Workbook command",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "EditedDocumentURL": {
          "description": "URL to the edited XLSX file; file is stored in an in-memory cache and will be deleted.  Call Finish-Editing to get the result document contents.",
          "type": "string"
        }
      }
    },
    "RemovePptxSlidesRequest": {
      "description": "Input to a Remove PowerPoint PPTX Presentation Slides request",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Optional: Bytes of the input file to operate on",
          "type": "string"
        },
        "InputFileUrl": {
          "description": "Optional: URL of a file to operate on as input.  This can be a public URL, or you can also use the begin-editing API to upload a document and pass in the secure URL result from that operation as the URL here (this URL is not public).",
          "type": "string"
        },
        "StartDeleteSlideNumber": {
          "format": "int32",
          "description": "Slide number (1-based) to start deleting slides; inclusive",
          "type": "integer"
        },
        "EndDeleteSlideNumber": {
          "format": "int32",
          "description": "Slide number (1-based) to stop deleting slides; inclusive",
          "type": "integer"
        }
      }
    },
    "HtmlGetLanguageResult": {
      "description": "Result of getting the language of the input HTML document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "LanguageCode": {
          "description": "HTML language code of the HTML document, e.g. \"en\" or \"de\"",
          "type": "string"
        }
      }
    },
    "HtmlGetRelCanonicalUrlResult": {
      "description": "Result of getting the canonical URL of the input HTML document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "CanonicalUrl": {
          "description": "HTML canonical URL if present",
          "type": "string"
        }
      }
    },
    "HtmlGetSitemapUrlResult": {
      "description": "Result of getting the sitemap URL of the input HTML document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "CanonicalUrl": {
          "description": "HTML sitemap URL if present",
          "type": "string"
        }
      }
    },
    "HtmlGetLinksResponse": {
      "description": "Result of extracting links from an HTML file",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Links": {
          "description": "All hyperlinks in the HTML document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HtmlHyperlink"
          }
        }
      }
    },
    "HtmlHyperlink": {
      "description": "Individual hyperlink in an HTML File",
      "type": "object",
      "properties": {
        "Anchortext": {
          "description": "Anchor text of the hyperlink, e.g. Click Here",
          "type": "string"
        },
        "Url": {
          "description": "URL of the hyperlink; fully-qualified if possible, otherwise relative",
          "type": "string"
        }
      }
    },
    "EditPdfBatchJobCreateResult": {
      "description": "Result of performing an edit PDF batch job operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobID": {
          "description": "When creating a job, an Async Job ID is returned.  Use the GetAsyncJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes",
          "type": "string"
        }
      }
    },
    "EditPdfJobStatusResult": {
      "description": "Result of performing a batch job operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "Tru eif the operation to check the status of the job was successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobStatus": {
          "description": "Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED",
          "type": "string"
        },
        "AsyncJobID": {
          "description": "When the job exceeds 25 pages, an Async Job ID is returned.  Use the CheckPdfOcrJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes",
          "type": "string"
        },
        "OutputFileResult": {
          "format": "byte",
          "description": "Output file result (if applicable)",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message (if any)",
          "type": "string"
        }
      }
    },
    "PdfTextByPageResult": {
      "description": "Text of the PDF, broken down by page",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Pages": {
          "description": "Pages in the PDF",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfPageText"
          }
        }
      }
    },
    "PdfPageText": {
      "description": "Text of a single page of a PDF",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the page (1-based)",
          "type": "integer"
        },
        "PageText": {
          "description": "Text of the page",
          "type": "string"
        }
      }
    },
    "PdfMetadata": {
      "description": "Result of an autodetect/get-info operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ErrorDetails": {
          "description": "Details of any errors if the operation was unsucessful",
          "type": "string"
        },
        "Title": {
          "description": "Title of the document",
          "type": "string"
        },
        "Keywords": {
          "description": "Keywords of the document",
          "type": "string"
        },
        "Subject": {
          "description": "Subject of the document",
          "type": "string"
        },
        "Author": {
          "description": "User name of the creator/author of the document, if available, null if not available",
          "type": "string"
        },
        "Creator": {
          "description": "Creator of the document",
          "type": "string"
        },
        "DateModified": {
          "format": "date-time",
          "description": "The timestamp that the document was last modified, if available, null if not available",
          "type": "string"
        },
        "DateCreated": {
          "format": "date-time",
          "description": "The timestamp that the document was created, if available, null if not available",
          "type": "string"
        },
        "PageCount": {
          "format": "int32",
          "description": "The number of pages in the document",
          "type": "integer"
        },
        "Encrypted": {
          "description": "True if the PDF document is encrypted, false otherwise",
          "type": "boolean"
        }
      }
    },
    "SetPdfMetadataRequest": {
      "description": "Request to set PDF metadata",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Input file contents bytes for the file to modify",
          "type": "string"
        },
        "MetadataToSet": {
          "$ref": "#/definitions/PdfMetadata",
          "description": "PDF metadata to set on the file"
        }
      }
    },
    "PdfFormFields": {
      "description": "Result of retrieving PDF form fields",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FormFields": {
          "description": "Fields and field values found in the form",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfFormField"
          }
        }
      }
    },
    "PdfFormField": {
      "description": "Field definition and value in the form",
      "type": "object",
      "properties": {
        "FieldName": {
          "description": "Name of the form field",
          "type": "string"
        },
        "FieldType": {
          "description": "The data type of the field; possible values are Text (FieldValue will be a string), Checkbox (FieldValue can be \"true\" or \"false\"), ComboBox (FieldComboBoxSelectedIndex will also be populated), Other",
          "type": "string"
        },
        "FieldValue": {
          "description": "Value of the form field",
          "type": "string"
        },
        "FieldComboBoxSelectedIndex": {
          "format": "int32",
          "description": "Applies to ComboBox field types only; specifies the selected index of the combo box selection if available",
          "type": "integer"
        }
      }
    },
    "SetPdfFormFieldsRequest": {
      "description": "Request to set the fields in a PDF form",
      "type": "object",
      "properties": {
        "FieldValues": {
          "description": "Field values to set",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SetFormFieldValue"
          }
        },
        "InputFileBytes": {
          "format": "byte",
          "description": "Contents of the input file to set the fields on",
          "type": "string"
        }
      }
    },
    "SetFormFieldValue": {
      "description": "Individual field value to set in a PDF form",
      "type": "object",
      "properties": {
        "FieldName": {
          "description": "Name of the field to set; you can call /convert/edit/pdf/form/get-fields to enumerate field names in a form",
          "type": "string"
        },
        "TextValue": {
          "description": "For fields of type Text, the text value to put into the field",
          "type": "string"
        },
        "CheckboxValue": {
          "description": "For fields of type Checkbox, the value to put into the field",
          "type": "boolean"
        },
        "ComboBoxSelectedIndex": {
          "format": "int32",
          "description": "For fields of type ComboBox; specifies the selected index of the combo box selection",
          "type": "integer"
        }
      }
    },
    "GetPdfAnnotationsResult": {
      "description": "Result of retrieving annotations from a PDF document",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Annotations": {
          "description": "Annotations in the PDF file, ordered by placement from start to finish in the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfAnnotation"
          }
        }
      }
    },
    "PdfAnnotation": {
      "description": "PDF Annotation details",
      "type": "object",
      "properties": {
        "Title": {
          "description": "Title of the annotation; this is often the author of the annotation in Acrobat-created PDF files",
          "type": "string"
        },
        "AnnotationType": {
          "description": "Type of the annotation; possible values are Text",
          "type": "string"
        },
        "PageNumber": {
          "format": "int32",
          "description": "The 1-based index of the page containing the annotation",
          "type": "integer"
        },
        "AnnotationIndex": {
          "format": "int32",
          "description": "The 0-based index of the annotation in the document",
          "type": "integer"
        },
        "Subject": {
          "description": "Subject of the annotation",
          "type": "string"
        },
        "TextContents": {
          "description": "Text contents of the annotation",
          "type": "string"
        },
        "CreationDate": {
          "format": "date-time",
          "description": "Date that the annotation was created",
          "type": "string"
        },
        "ModifiedDate": {
          "format": "date-time",
          "description": "Date that the annotation was last modified",
          "type": "string"
        },
        "LeftX": {
          "format": "double",
          "description": "Left X coordinate for the location of the annotation",
          "type": "number"
        },
        "TopY": {
          "format": "double",
          "description": "Top Y coordination of the location of the annotation",
          "type": "number"
        },
        "Width": {
          "format": "double",
          "description": "Width of the annotation",
          "type": "number"
        },
        "Height": {
          "format": "double",
          "description": "Height of the annotation",
          "type": "number"
        }
      }
    },
    "AddPdfAnnotationRequest": {
      "description": "Request to add annotations to a PDF",
      "type": "object",
      "properties": {
        "InputFileBytes": {
          "format": "byte",
          "description": "Input file contents bytes for the file to modify",
          "type": "string"
        },
        "AnnotationsToAdd": {
          "description": "Annotations to add to the PDF file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfAnnotation"
          }
        }
      }
    },
    "Base64DetectRequest": {
      "description": "Request to detect if input content is base 64 encoded",
      "type": "object",
      "properties": {
        "Base64ContentToDetect": {
          "description": "Input content text to detect if it is base 64 encoded",
          "type": "string"
        }
      }
    },
    "Base64DetectResponse": {
      "description": "Result of base 64 detection",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "IsBase64Encoded": {
          "description": "True if the input string is base 64 encoded, false otherwise",
          "type": "boolean"
        }
      }
    },
    "Base64EncodeRequest": {
      "description": "Request to encode content to Base 64",
      "type": "object",
      "properties": {
        "ContentToEncode": {
          "format": "byte",
          "description": "Input content to encode into Base 64",
          "type": "string"
        }
      }
    },
    "Base64EncodeResponse": {
      "description": "Result of base 64 encoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Base64TextContentResult": {
          "description": "Result of performing a base 64 encoding operation, a text string representing the encoded original file content",
          "type": "string"
        }
      }
    },
    "Base64DecodeRequest": {
      "description": "Request to decode content from Base 64 into binary",
      "type": "object",
      "properties": {
        "Base64ContentToDecode": {
          "description": "Input content to decode from Base 64 into binary",
          "type": "string"
        }
      }
    },
    "Base64DecodeResponse": {
      "description": "Result of base 64 decoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "ContentResult": {
          "format": "byte",
          "description": "Result of performing a base 64 decode operation, binary file content",
          "type": "string"
        }
      }
    },
    "TextEncodingDetectResponse": {
      "description": "Result of detecting text encoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextEncoding": {
          "description": "Text encoding used in file; possible values are ASCII, UTF7, UTF8, UTF16, BigEndianUnicode and UTF32",
          "type": "string"
        }
      }
    },
    "FindStringSimpleRequest": {
      "description": "Request to find a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetString": {
          "description": "Target input string to find",
          "type": "string"
        }
      }
    },
    "FindStringSimpleResponse": {
      "description": "Result of finding a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Matches": {
          "description": "Found matches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FindStringMatch"
          }
        },
        "MatchCount": {
          "format": "int32",
          "description": "The number of matches",
          "type": "integer"
        }
      }
    },
    "FindStringMatch": {
      "description": "Individual match result of finding a target string in a longer text string",
      "type": "object",
      "properties": {
        "CharacterOffsetStart": {
          "format": "int32",
          "description": "0-based index of the start of the match",
          "type": "integer"
        },
        "CharacterOffsetEnd": {
          "format": "int32",
          "description": "0-based index of the end of the match",
          "type": "integer"
        },
        "ContainingLine": {
          "description": "Text content of the line containing the match",
          "type": "string"
        }
      }
    },
    "FindStringRegexRequest": {
      "description": "Request to find a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetRegex": {
          "description": "Target input regular expression (regex) to find",
          "type": "string"
        },
        "MatchCase": {
          "description": "Set to True to match case, False to ignore case",
          "type": "boolean"
        }
      }
    },
    "FindStringRegexResponse": {
      "description": "Result of finding a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "Matches": {
          "description": "Regular expression matches",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FindRegexMatch"
          }
        },
        "MatchCount": {
          "format": "int32",
          "description": "The number of matches",
          "type": "integer"
        }
      }
    },
    "FindRegexMatch": {
      "description": "Individual regular expression match result of finding a target regex in a longer text string",
      "type": "object",
      "properties": {
        "CharacterOffsetStart": {
          "format": "int32",
          "description": "0-based index of the start of the match",
          "type": "integer"
        },
        "CharacterOffsetEnd": {
          "format": "int32",
          "description": "0-based index of the end of the match",
          "type": "integer"
        },
        "ContainingLine": {
          "description": "Text content of the line containing the match",
          "type": "string"
        },
        "MatchValue": {
          "description": "The match value",
          "type": "string"
        },
        "MatchGroups": {
          "description": "Regular expression regex match groups; these correspond to the match values",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ReplaceStringSimpleRequest": {
      "description": "Request to replace a string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "TargetString": {
          "description": "Target input string to match and be replaced",
          "type": "string"
        },
        "ReplaceWithString": {
          "description": "Replacement for target string",
          "type": "string"
        }
      }
    },
    "ReplaceStringSimpleResponse": {
      "description": "Result of replacing a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a replace string operation",
          "type": "string"
        }
      }
    },
    "ReplaceStringRegexRequest": {
      "description": "Request to replace a regex string in a string",
      "type": "object",
      "properties": {
        "TextContent": {
          "description": "Input text content",
          "type": "string"
        },
        "RegularExpressionString": {
          "description": "Target input regular expression (regex) string to match and be replaced; supports all regular expression values",
          "type": "string"
        },
        "ReplaceWithString": {
          "description": "Replacement for target string; supports referencing indexed regex matched values from RegularExpressionString, such as $1, $2, and so on",
          "type": "string"
        }
      }
    },
    "ReplaceStringRegexResponse": {
      "description": "Result of replacing a regex string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a base 64 decode operation, binary file content",
          "type": "string"
        }
      }
    },
    "DetectLineEndingsResponse": {
      "description": "Result of base 64 decoding",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "PrimaryNewlineType": {
          "description": "Type of newline in the file; possible vlaues are \"Mac\" (legacy Mac OS uses carriage return only); \"Unix\" (Unix and Linux OSes, and modern Mac OS); \"Windows\" (Windows operating systems)",
          "type": "string"
        },
        "PrimaryNewlineTerminator": {
          "description": "Characters used to terminate a newline; can be carriage return, linefeed, or carriage return + linefeed",
          "type": "string"
        },
        "InputLength": {
          "format": "int32",
          "description": "Length of the input string in characters",
          "type": "integer"
        }
      }
    },
    "ChangeLineEndingResponse": {
      "description": "Result of performing a change line ending operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Text content result",
          "type": "string"
        }
      }
    },
    "RemoveHtmlFromTextRequest": {
      "description": "Request to remove HTML from a string",
      "type": "object",
      "properties": {
        "TextContainingHtml": {
          "description": "Input text string to remove the HTML from",
          "type": "string"
        }
      }
    },
    "RemoveHtmlFromTextResponse": {
      "description": "Result of removing HTML from a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a remove HTML from string operation",
          "type": "string"
        }
      }
    },
    "RemoveWhitespaceFromTextRequest": {
      "description": "Request to remove whitespace from a string",
      "type": "object",
      "properties": {
        "TextContainingWhitespace": {
          "description": "Input text string to remove the whitespace from",
          "type": "string"
        }
      }
    },
    "RemoveWhitespaceFromTextResponse": {
      "description": "Result of removing whitespace from a string",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "TextContentResult": {
          "description": "Result of performing a remove whitespace from string operation",
          "type": "string"
        }
      }
    },
    "DocumentArrayInput": {
      "description": "Input array of documents to be processed for a merge operation",
      "type": "object",
      "properties": {
        "Documents": {
          "description": "Array of document objects",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentItem"
          }
        }
      }
    },
    "DocumentItem": {
      "description": "Object representing one document",
      "type": "object",
      "properties": {
        "DocumentFileName": {
          "description": "File name of the document",
          "type": "string"
        },
        "DocumentContent": {
          "format": "byte",
          "description": "Contents of the document as a binary byte array",
          "type": "string"
        }
      }
    },
    "SplitDocxDocumentResult": {
      "description": "The result of splitting a Word document into individual Word DOCX pages",
      "type": "object",
      "properties": {
        "ResultDocuments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SplitDocumentResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "SplitDocumentResult": {
      "description": "A single Word DOCX file corresponding to one page in the original document",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1 for the first page",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the DOCX file of this slide; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "DocumentContents": {
          "format": "byte",
          "description": "Contents of the document in bytes",
          "type": "string"
        }
      }
    },
    "SplitXlsxWorksheetResult": {
      "description": "The result of splitting a spreadsheet into individual Excel XLSX worksheets",
      "type": "object",
      "properties": {
        "ResultWorksheets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorksheetResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "WorksheetResult": {
      "description": "A single Excel XLSX file corresponding to one worksheet (tab) in the original spreadsheet",
      "type": "object",
      "properties": {
        "WorksheetNumber": {
          "format": "int32",
          "description": "Worksheet number of the converted page, starting with 1 for the left-most worksheet",
          "type": "integer"
        },
        "WorksheetName": {
          "description": "The name of the worksheet",
          "type": "string"
        },
        "URL": {
          "description": "URL to the XLSX file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "WorksheetContents": {
          "format": "byte",
          "description": "Contents of the worksheet in bytes",
          "type": "string"
        }
      }
    },
    "SplitPptxPresentationResult": {
      "description": "The result of splitting a presentation into individual PowerPoint PPTX slides",
      "type": "object",
      "properties": {
        "ResultPresentations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PresentationResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "PresentationResult": {
      "description": "A single PowerPoint PPTX file corresponding to one slide in the original presentation",
      "type": "object",
      "properties": {
        "SlideNumber": {
          "format": "int32",
          "description": "Worksheet number of the converted page, starting with 1 for the left-most worksheet",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PPTX file of this slide; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "PresentationContents": {
          "format": "byte",
          "description": "Contents of the presentation in bytes",
          "type": "string"
        }
      }
    },
    "PptxSplitAdvancedRequest": {
      "description": "Request to split a PowerPoint presentation",
      "type": "object",
      "properties": {
        "InputFile": {
          "format": "byte",
          "description": "Input file",
          "type": "string"
        },
        "SlidesPerPresentation": {
          "format": "int32",
          "description": "Slides per presentation for result",
          "type": "integer"
        }
      }
    },
    "PptxSplitAdvancedResponse": {
      "description": "Result of splitting a single PowerPoint Presentation PPTX into Separate Presentations",
      "type": "object",
      "properties": {
        "ResultPresentations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PresentationAdvancedResult"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        }
      }
    },
    "PresentationAdvancedResult": {
      "description": "A single PowerPoint PPTX file corresponding to one worksheet (tab) in the original spreadsheet",
      "type": "object",
      "properties": {
        "SlideNumber": {
          "format": "int32",
          "description": "Presentation number of the converted page, starting with 1 for the left-most worksheet",
          "type": "integer"
        },
        "PresentationContents": {
          "format": "byte",
          "description": "Contents of the presentation in bytes",
          "type": "string"
        }
      }
    },
    "SplitPdfResult": {
      "description": "Result of performing a PDF file split operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "Documents": {
          "description": "PDF documents as output",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PdfDocument"
          }
        }
      }
    },
    "PdfDocument": {
      "description": "A single PDF file corresponding to one page in the original document",
      "type": "object",
      "properties": {
        "PageNumber": {
          "format": "int32",
          "description": "Page number of the converted page, starting with 1 for the first page",
          "type": "integer"
        },
        "URL": {
          "description": "URL to the PDF file of this worksheet; file is stored in an in-memory cache and will be deleted",
          "type": "string"
        },
        "DocumentContents": {
          "format": "byte",
          "description": "If returnDocumentContents is set to true, will contain the contents of the document; otherwise will be set to null and the document contents will be available via the URL parameter",
          "type": "string"
        }
      }
    },
    "SplitTextDocumentByLinesResult": {
      "description": "The result of splitting a Text document into separate lines",
      "type": "object",
      "properties": {
        "ResultLines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextDocumentLine"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "LineCount": {
          "format": "int32",
          "description": "The count of lines in the text file",
          "type": "integer"
        }
      }
    },
    "TextDocumentLine": {
      "description": "A single line of a Text document",
      "type": "object",
      "properties": {
        "LineNumber": {
          "format": "int32",
          "description": "The 1-based line index of the line",
          "type": "integer"
        },
        "LineContents": {
          "description": "The text contents of a single line of a text file",
          "type": "string"
        }
      }
    },
    "SplitTextDocumentByStringResult": {
      "description": "The result of splitting a Text document into separate elements",
      "type": "object",
      "properties": {
        "ResultElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextDocumentElement"
          }
        },
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ElementCount": {
          "format": "int32",
          "description": "The count of elements in the text file",
          "type": "integer"
        }
      }
    },
    "TextDocumentElement": {
      "description": "A single element of a Text document",
      "type": "object",
      "properties": {
        "ElementNumber": {
          "format": "int32",
          "description": "The 1-based line index of the element",
          "type": "integer"
        },
        "ElementContents": {
          "description": "The text contents of a single element of a text file",
          "type": "string"
        }
      }
    },
    "SplitBatchJobCreateResult": {
      "description": "Result of performing a split document batch job",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobID": {
          "description": "When creating a job, an Async Job ID is returned.  Use the GetAsyncJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes",
          "type": "string"
        }
      }
    },
    "JobStatusResult": {
      "description": "Result of performing a batch job operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "Tru eif the operation to check the status of the job was successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobStatus": {
          "description": "Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED",
          "type": "string"
        },
        "AsyncJobID": {
          "description": "When the job exceeds 25 pages, an Async Job ID is returned.  Use the CheckPdfOcrJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes",
          "type": "string"
        },
        "PptxResult": {
          "$ref": "#/definitions/SplitPptxPresentationResult",
          "description": "PowerPoint split result (if applicable)"
        },
        "ErrorMessage": {
          "description": "Error message (if any)",
          "type": "string"
        }
      }
    },
    "DocumentTransformEditSession": {
      "description": "Active document editing session result.  To retrieve the document, use the Finish Editing API.",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "EditSessionURL": {
          "description": "Document editing session URL; in-memory temporary cache link with TTL (Time-to-Live expiration) of 30 minutes.  To retrieve the document, use the Finish Editing API.",
          "type": "string"
        }
      }
    },
    "DocxTableTableFillRequest": {
      "description": "Request to update data in a table in a Word DOCX Document",
      "type": "object",
      "properties": {
        "InputFileUrl": {
          "description": "Optional; Input URL of the document; use BeginEditing to create this",
          "type": "string"
        },
        "InputFileData": {
          "format": "byte",
          "description": "Optional; Input Word Document file content for the operation",
          "type": "string"
        },
        "TableStartTag": {
          "description": "Start tag that delineates the beginning of the table",
          "type": "string"
        },
        "TableEndTag": {
          "description": "End tag that delineates the end of the table",
          "type": "string"
        },
        "DataToFillIn": {
          "description": "Data set to populate the table with",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableTableFillTableRow"
          }
        }
      }
    },
    "DocxTableTableFillTableRow": {
      "description": "Row data to fill in to the DOCX Table",
      "type": "object",
      "properties": {
        "Cells": {
          "description": "Cells in the row to fill in",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableTableFillTableCell"
          }
        }
      }
    },
    "DocxTableTableFillTableCell": {
      "description": "Cell data to fill in to the DOCX Table",
      "type": "object",
      "properties": {
        "TargetTag": {
          "description": "Target tag to replace",
          "type": "string"
        },
        "ReplacementValue": {
          "description": "Replacement value for the target tag",
          "type": "string"
        }
      }
    },
    "DocxTableTableFillMultiRequest": {
      "description": "Request to update data in a table in a Word DOCX Document",
      "type": "object",
      "properties": {
        "InputFileUrl": {
          "description": "Optional; Input URL of the document; use BeginEditing to create this",
          "type": "string"
        },
        "InputFileData": {
          "format": "byte",
          "description": "Optional; Input Word Document file content for the operation",
          "type": "string"
        },
        "TablesToFill": {
          "description": "Tables and datasets to fill into the document",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableSingleTableFill"
          }
        }
      }
    },
    "DocxTableSingleTableFill": {
      "description": "Single table fill request in a multi-table fill operation",
      "type": "object",
      "properties": {
        "TableStartTag": {
          "description": "Start tag that delineates the beginning of the table",
          "type": "string"
        },
        "TableEndTag": {
          "description": "End tag that delineates the end of the table",
          "type": "string"
        },
        "DataToFillIn": {
          "description": "Data set to populate the table with",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocxTableTableFillTableRow"
          }
        }
      }
    },
    "AutodetectDocumentValidationResult": {
      "description": "Document validation result",
      "type": "object",
      "properties": {
        "FileFormatExtension": {
          "type": "string"
        },
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "format": "int32",
          "description": "Number of validation errors found in the document",
          "type": "integer"
        },
        "WarningCount": {
          "format": "int32",
          "description": "Number of validation warnings found in the document",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          }
        }
      }
    },
    "DocumentValidationError": {
      "description": "Validation error found in document",
      "type": "object",
      "properties": {
        "Description": {
          "description": "Description of the error",
          "type": "string"
        },
        "Path": {
          "description": "XPath to the error",
          "type": "string"
        },
        "Uri": {
          "description": "URI of the part in question",
          "type": "string"
        },
        "IsError": {
          "description": "True if this is an error, false otherwise",
          "type": "boolean"
        }
      }
    },
    "DocumentValidationResult": {
      "description": "Document validation result",
      "type": "object",
      "properties": {
        "DocumentIsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "PasswordProtected": {
          "description": "True if the document is password protected, false otherwise",
          "type": "boolean"
        },
        "ErrorCount": {
          "format": "int32",
          "description": "Number of validation errors found in the document",
          "type": "integer"
        },
        "WarningCount": {
          "format": "int32",
          "description": "Number of validation warnings found in the document",
          "type": "integer"
        },
        "ErrorsAndWarnings": {
          "description": "Details of errors and warnings found",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentValidationError"
          }
        }
      }
    },
    "XxeThreatDetectionResult": {
      "description": "Result of performing an XXE threat detection operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "ContainsXxeThreat": {
          "description": "True if the XML input contains XXE threats, false otherwise",
          "type": "boolean"
        }
      }
    },
    "HtmlSsrfThreatCheckResult": {
      "description": "HTML SSRF validation result",
      "type": "object",
      "properties": {
        "IsValid": {
          "description": "True if the document is valid and has no errors, false otherwise",
          "type": "boolean"
        },
        "IsThreat": {
          "description": "True if the document contains an SSRF threat, false otherwise",
          "type": "boolean"
        },
        "ThreatLinks": {
          "description": "Links found in the input HTML that contains threats",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HtmlThreatLink"
          }
        }
      }
    },
    "HtmlThreatLink": {
      "description": "Threat assessment for a hyperlink URL",
      "type": "object",
      "properties": {
        "LinkUrl": {
          "description": "URL of the link",
          "type": "string"
        },
        "ThreatLevel": {
          "description": "Threat assessment level; possible values are None, Low, Medium and High",
          "type": "string"
        }
      }
    },
    "ViewerResponse": {
      "description": "Result of creating a viewer",
      "type": "object",
      "properties": {
        "HtmlEmbed": {
          "type": "string"
        },
        "Successful": {
          "type": "boolean"
        }
      }
    },
    "CreateZipArchiveRequest": {
      "description": "Request to create a Zip Archive",
      "type": "object",
      "properties": {
        "FilesInZip": {
          "description": "Top-level files in the root directory fo the zip file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        },
        "DirectoriesInZip": {
          "description": "Top-level directories in the root directory of the zip; directories can contain sub-directories and files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        }
      }
    },
    "ZipFile": {
      "description": "Representation of a file in a zip file",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of this file",
          "type": "string"
        },
        "FileContents": {
          "format": "byte",
          "description": "Contents of this file",
          "type": "string"
        }
      }
    },
    "ZipDirectory": {
      "description": "Representation of a directory in a zip file",
      "type": "object",
      "properties": {
        "DirectoryName": {
          "description": "Name of this directory",
          "type": "string"
        },
        "DirectoriesInDirectory": {
          "description": "Child directories contained directly in this directory",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        },
        "FilesInDirectory": {
          "description": "Child files contained directly in this directory",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        }
      }
    },
    "ZipExtractResponse": {
      "description": "Result of performing a zip extract operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation was successful, false otherwise",
          "type": "boolean"
        },
        "FilesInZip": {
          "description": "Top-level files in the root directory fo the zip file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipFile"
          }
        },
        "DirectoriesInZip": {
          "description": "Top-level directories in the root directory of the zip; directories can contain sub-directories and files",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZipDirectory"
          }
        }
      }
    },
    "ZipEncryptionAdvancedRequest": {
      "description": "Request to encrypt an existing Zip Archive file and protect it with a password",
      "type": "object",
      "properties": {
        "InputFileContents": {
          "format": "byte",
          "description": "Input Zip File archive contents in bytes",
          "type": "string"
        },
        "Password": {
          "description": "Password to place on the Zip file; the longer the password, the more secure",
          "type": "string"
        },
        "EncryptionAlgorithm": {
          "description": "Encryption algorithm to use; possible values are AES-256 (recommended), AES-128, and PK-Zip (not recommended; legacy, weak encryption algorithm).  Default is AES-256.",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Apikey": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "Apikey",
      "in": "header"
    }
  }
}
